<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios 5 | Cocoa学习]]></title>
  <link href="http://cocoa.venj.me/blog/categories/ios-5/atom.xml" rel="self"/>
  <link href="http://cocoa.venj.me/"/>
  <updated>2015-11-11T09:29:09+08:00</updated>
  <id>http://cocoa.venj.me/</id>
  <author>
    <name><![CDATA[venj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈iOS 5的StoryBoard]]></title>
    <link href="http://cocoa.venj.me/blog/ios5-story-board-a-brief-discussion/"/>
    <updated>2011-08-24T00:34:00+08:00</updated>
    <id>http://cocoa.venj.me/blog/ios5-story-board-a-brief-discussion</id>
    <content type="html"><![CDATA[<p>StoryBoard是iOS 5的新特征，旨在代替历史悠久的NIB/XIB（其实<strong>StoryBoard还是基于NIB/XIB的</strong>，不过开发人员已经无需直接跟NIB打交道了）。目前关于StoryBoard的文档并不多，苹果的iOS 5的开发者文档里也仅有不多的介绍。所以，本文只是简单的谈谈本人对StoryBoard的一些粗浅的理解。（StoryBoard有时也叫做StoryBoarding，我不太注意这种细节，所以两个词经常会混用，如果你英语可以的话，能体会到两者的细微差别）</p>

<p><img class="center" src="/images/posts/storyboard-1.png"></p>

<!-- more -->


<p>
StoryBoarding机制比之NIB/XIB的的优势何在呢？个人认为，StoryBoard有以下几个优点：</p>

<blockquote><ol>
<li>能够减少很多跟View相关的代码；</li>
<li>能够使View和Controller进一步解耦；</li>
<li>能够优化程序的“页面流”，使程序的结构更清楚 ；</li>
</ol>
</blockquote>

<p>要理解这些优点，我们先要对NIB有一个基本的认识。通常，NIB是和ViewController相关联的，很多ViewController都有对应的NIB文件。NIB文件的作用是描述用户界面以及初始化对象和界面元素对象。其实开发者在NIB里描述的界面和初始化的对象都能够在代码中实现；之所以用Interface Builder来绘制界面，是为了减少那些设置界面属性的无聊和重复的代码，让开发人员能够集中精力做程序的功能。</p>

<p>而StoryBoard的出现，则是进一步加强了这方面的功能；NIB文件是没有办法描述从一个ViewController到另一个ViewController的过渡的。这种过渡只能靠手写代码来实现。相信很多人都会经常用到 <code>-presentModalViewController:animated:</code>以及<code>-pushViewController:animated:</code>这两个方法。这种代码在Storyboarding里将成为历史；取而代之的是Segue。Segue定义了从一个ViewController到另一个ViewController的过渡。在Storyboard里，我们只需要像连接界面对象和Action Method那样把ViewController之间用Segue连接起来就可以了，不再需要手写代码了。即便你像自定义Segue，你也只需写Segue的实现，而无需编写调用的代码，StoryBoard会帮你调用的。这就是上面所说的第一个优点。</p>

<p><img class="center" src="/images/posts/storyboard-2.png"></p>

<p>要用好Storyboarding机制，那么必须严格遵守MVC原则。要让View和Controller充分解耦；并且不同的Controller之间也要充分解耦。否则，程序的业务逻辑就会乱成一团，很难理解，维护和除虫（Debug）。</p>

<p>举个例子来说：在过去，特别是初学Cocoa Touch开发的时候，很多人都喜欢直接把<code>AppDelegate</code>当ViewController用，直接在AppDelegate和<code>MainMenu.xib</code>之间交互。应该说，<strong>这是一个非常不好的习惯</strong>。<code>AppDelegate</code>的作用很简单，就是处理<code>UIApplication</code>的回调，而不应该负责用户界面的处理。很多iOS教程为了省事，都直接把<code>AppDelegate</code>当ViewController用，甚至直接举例在<code>UIWindow</code>上绘制界面。虽然，作为教程这么做很简单明了，因为<code>UIWindow</code>也是<code>UIView</code>的子类，但是这却不是一种优良的实践。因为<strong>由ViewController来负责处理View才是正确的做法</strong>。</p>

<p>近一段时间，苹果的项目模版经常发生改变，特别是自从Xcode 4发布之后，程序模版（如，View Based Application）开始鼓励使用<code>UIWindow</code>的<code>rootViewController</code>属性来指定第一屏的ViewController，以保证<code>AppDelegate</code>专注于它应该做的事情。而引入StoryBoard之后，<code>AppDelegate</code>已经不管ViewController的事情了 ；第一屏所使用的ViewController（也就是<code>rootViewController</code>）可以在StoryBoard中设置。这样，程序的入口点就能从StoryBoard的“设计图”上一目了然了。这是第二个优点。</p>

<p><img class="center" src="/images/posts/storyboard-3.png"></p>

<p>至于第三个优点，就是StoryBoard的“设计图”了。StoryBoard能够包含一个程序所有的ViewController以及它们之间的连接。因此，StoryBoard甚至可以作为程序的“设计图”来用了。理想情况下，在程序开发接近尾声的时候，我们只需对比StoryBoard的“流程”和最初程序的设计“流程”，就知道程序有没有“走样”了。</p>

<p><img class="center" src="/images/posts/storyboard-4.png"></p>

<p>说完了优点，我们来看看从NIB/XIB到StoryBoard的迁移，我们需要有哪些理解和实践上的改变呢？</p>

<blockquote><ul>
<li>首先，自然是（在做程序开发的时候）ViewController不再需要NIB/XIB了（虽然在后台还是用的NIB）。以前在NIB/XIB上做的连接Outlet和Action的操作都可以在StoryBoard上完成了；</li>
<li>第二，孤儿View（独立于ViewController的View）是不能出现在StoryBoard里的，View必须通过ViewController来管理（StoryBoard更像是Controller对象的容器，而不是View对象的容器，NIB/XIB可以作为View对象的容器）；</li>
<li>第三，ViewController之间的过渡代码已经是历史了，用StoryBoard可以直接可视化地连接不同的ViewController；</li>
<li>第四，UIWindow对象的作用被进一步淡化，甚至可以这么说：其实很多程序根本无需用到UIWindow对象。<code>AppDelegate</code>也不再被鼓励（也不能）用来做ViewController－－你甚至无法在Interface Builder的StoryBoard图上找到<code>AppDelegate</code>对象－－因为它本来就不应该用来处理界面（View）的。</li>
<li>最后，写优质的代码，严格遵守MVC设计模式，这样不仅能够让你用好StoryBoard，也能帮助你理解StoryBoard的原理。</li>
</ul>
</blockquote>

<p>StoryBoard是非常好的鼓励MVC和代码解耦的手段，能够让开发人员写出更加容易维护的代码。不过对于初学者来说，确实是个对理解力的小挑战。不过作为初学者也不用担心，一旦突破了理解障碍，你就会发现StoryBoard也非常好用－－就像最初理解NIB/XIB时，Outlet和Action“拉线”来“拉线”去，看起来也很神奇；理解之后，发现原来“拉线”神马的也没那么神秘。</p>

<p>好了，絮絮叨叨的啰嗦了这么多无聊的文字，相信你也看累了。如果你依然对我写的东西不知所云的话，你可以稍稍研究一下Xcode 4.2的几个内建模版，然后和使用XIB的模版对比一下，看看苹果是怎么用StoryBoard的，能够很好的帮助你理解Storyboarding机制。当然，千万不要忘记亲自动手用一用StoryBoard！</p>

<p>Happy Coding!</p>

<p><strong>【更新】</strong></p>

<p>在看了WWDC 2011 的session video：UIViewController Containment这个视频之后，我感觉，正确的处理<code>UIViewController</code>之间的层级关系对于Storyboard来说非常重要，两者能够相得益彰。而<code>window.rootViewController</code>的使用，虽然也是鼓励用户不要把<code>AppDelegate</code>当ViewController用，更重要的是鼓励用户使用正确的<code>UIViewController</code>层级关系。</p>

<p>（全文完）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS项目的测试简介]]></title>
    <link href="http://cocoa.venj.me/blog/testing-ios-projects/"/>
    <updated>2011-08-17T15:06:00+08:00</updated>
    <id>http://cocoa.venj.me/blog/testing-ios-projects</id>
    <content type="html"><![CDATA[<p>记得有人说过，写不写测试代码是判断一个开发者是否成熟的标志。良好的测试代码能够让程序代码更健壮，使重构更加方便。虽然Objective-C是一种编译语言，但是在Xcode的帮助下，做测试和测试驱动开发（Test Driven Development, TDD）也非常方便。苹果官方有一个关于如何做为项目增加测试支持的文档，不过iOS 4.3的文档包的的<a href="http://developer.apple.com/library/iOS/#documentation/Xcode/Conceptual/iphone_development/135-Unit_Testing_Applications/unit_testing_applications.html">该文档</a>已经比较老了，如果你是付费iOS开发者，那么可以看看iOS 5.0的文档包的的<a href="https://developer.apple.com/library/prerelease/ios/#documentation/Xcode/Conceptual/ios_development_workflow/135-Unit_Testing_Applications/unit_testing_applications.html">该文档</a>，已经更新为Xcode 4的教程了。</p>

<p>iOS的测试分两种，一种是逻辑测试（Logic Tests）；另一种是程序测试（Application Tests）。逻辑测试主要是用来测试模块的业务逻辑的；程序测试则是测试模块在整个应用程序中的行为是否正确。逻辑测试类似单元测试；而程序测试则类似集成测试。个人感觉，逻辑测试比较适合测试模型代码；而应用程序测试则比较适合测试控制器和视图代码，考虑到视图在iOS开发中主要是通过Interface Builder来实现，因此，应用测试实际上就是测试控制器代码的。</p>

<p>下面，简单的讲一下如何设置项目支持单元测试。我们要在Xcode中为项目建立两种测试的Target。</p>

<!-- more -->


<p>
首先，打开“File” - “New” - “New Target&hellip;”。这时，选择iOS大标签下面的“Others”小标签，里面有一个“Cocoa Touch Unit Testing Bundle”。选中它，点击“Next”。（如下图所示）</p>

<p><img class="center" src="/images/posts/unittest-1.png"></p>

<p>在下一页里，填入测试的名字。我们现在要建的是逻辑测试，虽然名字可以随意，不过，我这里把它命名为MyTestAppLogicTests。Project当然是选择当前的项目。（如下图所示）</p>

<p><img class="center" src="/images/posts/unittest-2.png"></p>

<p>点击“Finish”完成。这时，在Project设置的面板里就会增加一个新的Logic Tests的Target。</p>

<p><img class="center" src="/images/posts/unittest-3.png"></p>

<p>同样的方法建立一个程序测试的Target，命名为MyTestAppApplicationTests。</p>

<p>然后开始对两个Target进行配置。</p>

<p>首先是逻辑测试。在编译设置的标签下，选择All，然后搜索：</p>

<blockquote><ul>
<li>ios deployment target，如果显示为加粗，则选中后按下Delete键。</li>
<li>bundle loader，如果显示为加粗，则选中后按下Delete键。</li>
<li>test host，如果显示为加粗，则选中后按下Delete键。</li>
</ul>
</blockquote>

<p><img class="center" src="/images/posts/unittest-4.png"></p>

<p>然后是程序测试。在编译设置的标签下，选择All，然后搜索：</p>

<blockquote><ul>
<li>ios deployment target，如果显示为加粗，则选中后按下Delete键。</li>
<li>bundle loader，设置值为<code>$(BUILT_PRODUCTS_DIR)/APP_NAME.app/APP_NAME</code>。<code>APP_NAME</code>是程序的名字，比如这个例子里是<code>MyTestApp</code></li>
<li>test host，设置值为<code>$(BUNDLE_LOADER)</code>。</li>
</ul>
</blockquote>

<p><img class="center" src="/images/posts/unittest-5.png"></p>

<p>设置完成之后，我们就可以开始试着编译一下，看看配置有没有成功。在Xcode 4的工具条的Scheme部分，选择其中一个测试，以及运行测试的设备，如“iPhone 4.3 Simulator”。然后点击菜单“Project” - “Test”，或按下cmd - u。</p>

<p>因为测试bundle的代码模版里包含一个不能通过的测试例。如果你看到一个不是编译错误的问题，基本上就是配置成功了。分别试一下逻辑测试的配置和程序测试的配置，看看是否都成功。</p>

<p>配置成功后，就可以开始写测试代码了。</p>

<p>首先还是先开看看逻辑测试代码的写法。在MyTestAppLogicTests的类中，加入下面这些简单的测试代码。我们这里要测试的是一个名为<code>MySillyAdd</code>的类。这个类只有一个方法，<code>-addNumberA: ToNumberB:</code>，返回两个整数的和：</p>

<pre><code class="objc">//
//  MyTestAppLogicTests.h
//

#import &lt;SenTestingKit/SenTestingKit.h&gt;
#import "MySillyAdd.h"

@interface MyTestAppLogicTests : SenTestCase {
    MySillyAdd *mySillyAdd;
}

@end

//
//  MyTestAppLogicTests.m
//

#import "MyTestAppLogicTests.h"

@implementation MyTestAppLogicTests

# 运行测试例之前的设置
- (void)setUp
{
    [super setUp];

    // Set-up code here.
    mySillyAdd = [[MySillyAdd alloc] init];
    STAssertNotNil(mySillyAdd, @"Can not create MySillyAdd object.");
}

# 运行测试例之后的清理现场
- (void)tearDown
{
    // Tear-down code here.
    [mySillyAdd release];

    [super tearDown];
}

# 测试例，都是方法名为：testXXXX，用ST...的Macro来验证测试结果。
- (void)testAddOneToOne {
    NSInteger result = [mySillyAdd addNumberA:1 ToNumberB:1];
    STAssertEquals(2, 2, @"Expect 2 for result, but got %d", result);
}
@end
</code></pre>

<p>程序测试的与逻辑测试的区别在于需要在<code>-setUp:</code>方法中获取应用程序的环境。示例代码如下：</p>

<pre><code class="objc">//
//  MyTestAppApplicationTests.h
//

#import &lt;SenTestingKit/SenTestingKit.h&gt;
#import &lt;UIKit/UIKit.h&gt;
#import "MyTestAppViewController.h"
#import "MyTestAppAppDelegate.h"

@interface MyTestAppApplicationTests : SenTestCase {
    MyTestAppViewController *vc;
    MyTestAppAppDelegate *appDelegate;
    UIView *view;
}

- (void)testAddOneToOne;

@end

//
//  MyTestAppApplicationTests.m
//

#import "MyTestAppApplicationTests.h"

@implementation MyTestAppApplicationTests

# 设置测试环境，获取应用程序实例。
- (void)setUp
{
    [super setUp];

    // Set-up code here.
    appDelegate = [[UIApplication sharedApplication] delegate];
    vc = (MyTestAppViewController *)appDelegate.window.rootViewController;
    view = vc.view;
}

- (void)tearDown
{
    // Tear-down code here.

    [super tearDown];
}

- (void) testAppDelegate {
    STAssertNotNil(appDelegate, @"Cannot find the application delegate");
}

# 测试1+1的结果是不是等于2
- (void)testAddOneToOne {
    vc.numberA.text = @"1";
    vc.numberB.text = @"1";

    [vc calc:[view viewWithTag:3]]; // The Tag Button;

    NSString *resultString = vc.resultLabel.text;

    STAssertEqualObjects(@"2", resultString, @"Expect 2 for result, but got %@", resultString);
}
@end
</code></pre>

<p>上例测试的是<code>MyTestAppViewController</code>中的<code>-calc:</code>方法。我们先来测试一个<code>-calc:</code>的实现：</p>

<pre><code class="objc">- (IBAction)calc:(id)sender {
    NSInteger a = [self.numberA.text integerValue];
    NSInteger b = [self.numberB.text integerValue];

    self.resultLabel.text = [NSString stringWithFormat:@"%d", a + b];
}
</code></pre>

<p>运行测试，我们就可以看到这个测试例顺利通过。</p>

<p>然后，我们对上述方法进行重构，用我们的<code>MySillyAdd</code>类来实现1+1。再次运行测试例。</p>

<pre><code class="objc">- (IBAction)calc:(id)sender {
    NSInteger a = [self.numberA.text integerValue];
    NSInteger b = [self.numberB.text integerValue];

    self.resultLabel.text = [NSString stringWithFormat:@"%d", [mySillyAdd addNumberA:a ToNumberB:b]];
}
</code></pre>

<p>在<code>MySillyAdd</code>中，<code>-addNumberA:ToNumberB:</code>的实现如下：</p>

<pre><code class="objc">- (NSInteger)addNumberA:(NSInteger)theNumberA ToNumberB:(NSInteger)theNumberB {
    return theNumberA + theNumberB;
}
</code></pre>

<p>测试运行结果是顺利通过。虽然这个例子非常傻，不过基本上描述了写测试的大致过程。本文的示例代码在这里，有兴趣的可以看看。</p>

<p>通过这个简单的例子，我们了解了如何在iOS开发中加入测试，以后，我们就能通过编写测试代码来使我们写的代码更加健壮了。</p>

<p>最后附上逻辑测试和程序测试的输出。</p>

<p><strong>逻辑测试</strong></p>

<pre><code>Test Suite '/Users/venj/Library/Developer/Xcode/DerivedData/MyTestApp-cyecpqfpcbcdlcgizexbrsjxlngw/Build/Products/Debug-iphonesimulator/MyTestAppLogicTests.octest(Tests)' started at 2011-08-17 07:41:15 +0000
Test Suite 'MyTestAppLogicTests' started at 2011-08-17 07:41:15 +0000
Test Case '-[MyTestAppLogicTests testAddOneToOne]' started.
Test Case '-[MyTestAppLogicTests testAddOneToOne]' passed (0.000 seconds).
Test Suite 'MyTestAppLogicTests' finished at 2011-08-17 07:41:15 +0000.
Executed 1 test, with 0 failures (0 unexpected) in 0.000 (0.001) seconds

Test Suite '/Users/venj/Library/Developer/Xcode/DerivedData/MyTestApp-cyecpqfpcbcdlcgizexbrsjxlngw/Build/Products/Debug-iphonesimulator/MyTestAppLogicTests.octest(Tests)' finished at 2011-08-17 07:41:15 +0000.
Executed 1 test, with 0 failures (0 unexpected) in 0.000 (0.002) seconds
</code></pre>

<p><strong>程序测试</strong></p>

<pre><code>Test Suite 'All tests' started at 2011-08-17 07:43:20 +0000
Test Suite '/Users/venj/Library/Developer/Xcode/DerivedData/MyTestApp-cyecpqfpcbcdlcgizexbrsjxlngw/Build/Products/Debug-iphonesimulator/MyTestAppApplicationTests.octest(Tests)' started at 2011-08-17 07:43:20 +0000
Test Suite 'MyTestAppApplicationTests' started at 2011-08-17 07:43:20 +0000
Test Case '-[MyTestAppApplicationTests testAddOneToOne]' started.
Test Case '-[MyTestAppApplicationTests testAddOneToOne]' passed (0.001 seconds).
Test Case '-[MyTestAppApplicationTests testAppDelegate]' started.
Test Case '-[MyTestAppApplicationTests testAppDelegate]' passed (0.001 seconds).
Test Suite 'MyTestAppApplicationTests' finished at 2011-08-17 07:43:20 +0000.
Executed 2 tests, with 0 failures (0 unexpected) in 0.002 (0.004) seconds

Test Suite '/Users/venj/Library/Developer/Xcode/DerivedData/MyTestApp-cyecpqfpcbcdlcgizexbrsjxlngw/Build/Products/Debug-iphonesimulator/MyTestAppApplicationTests.octest(Tests)' finished at 2011-08-17 07:43:20 +0000.
Executed 2 tests, with 0 failures (0 unexpected) in 0.002 (0.007) seconds

Test Suite '/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.3.sdk/Developer/Library/Frameworks/SenTestingKit.framework(Tests)' started at 2011-08-17 07:43:20 +0000
Test Suite 'SenInterfaceTestCase' started at 2011-08-17 07:43:20 +0000
Test Suite 'SenInterfaceTestCase' finished at 2011-08-17 07:43:20 +0000.
Executed 0 tests, with 0 failures (0 unexpected) in 0.000 (0.001) seconds

Test Suite '/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.3.sdk/Developer/Library/Frameworks/SenTestingKit.framework(Tests)' finished at 2011-08-17 07:43:20 +0000.
Executed 0 tests, with 0 failures (0 unexpected) in 0.000 (0.003) seconds

Test Suite 'All tests' finished at 2011-08-17 07:43:20 +0000.
Executed 2 tests, with 0 failures (0 unexpected) in 0.002 (0.086) seconds
</code></pre>

<p>(全文完)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 5的Geocoding]]></title>
    <link href="http://cocoa.venj.me/blog/geocoding-in-ios-5/"/>
    <updated>2011-07-06T23:44:00+08:00</updated>
    <id>http://cocoa.venj.me/blog/geocoding-in-ios-5</id>
    <content type="html"><![CDATA[<p>很明显，本文有标题党的嫌疑。其实本文要说的是“<a href="http://www.bignerdranch.com/book/ios_programming_the_big_nerd_ranch_guide_nd_edition_">iPhone Programming: The Big Nerd Ranch Guide</a>”一书中第5章里的Whereami的例子。我照着书本做下来，但是感觉例子似乎有点问题。可能是我看书不仔细，不过这个例子要实现的功能很诡异——定位自己，然后自己用文本框加上一个Annotation(？)这太诡异了吧。</p>

<p>我现在对这个例子小做修改，那就是，在文本框中输入任何地址字符串，然后地图自动定位到该位置——类似Google Map的搜索。我基于书本上的代码，做一些小修改。</p>

<p>首先，注释掉<code>-locationManager:didUpdateToLocation:fromLocation:</code>这个方法里的所有代码。主要对<code>-findLocation</code>方法作出修改，实现地图搜索功能。</p>

<!-- more -->


<p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">findLocation</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">CLGeocoder</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">geoCoder</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CLGeocoder</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">geoCoder</span> <span class="nl">geocodeAddressString</span><span class="p">:</span><span class="n">locationString</span> <span class="nl">completionHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">placemarks</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="p">@</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">[</span><span class="n">error</span> <span class="n">description</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">CLPlacemark</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">m</span> <span class="o">=</span> <span class="p">[</span><span class="n">placemarks</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="n">MapPoint</span> <span class="o">*</span><span class="n">mp</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MapPoint</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCoordinate</span><span class="p">:[[</span><span class="n">m</span> <span class="n">location</span><span class="p">]</span> <span class="n">coordinate</span><span class="p">]</span> <span class="nl">title</span><span class="p">:[</span><span class="n">locationTitleField</span> <span class="n">text</span><span class="p">]];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">mapView</span> <span class="nl">addAnnotation</span><span class="p">:</span><span class="n">mp</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">mp</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">mapView</span> <span class="nl">setCenterCoordinate</span><span class="p">:[[</span><span class="n">m</span> <span class="n">location</span><span class="p">]</span> <span class="n">coordinate</span><span class="p">]</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span> <span class="n">foundLocation</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">locationManager</span> <span class="n">startUpdatingLocation</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">activityIndicator</span> <span class="n">startAnimating</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">locationTitleField</span> <span class="nl">setHidden</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这里用到了iOS5里的一个全新的类：<code>CLGeocoder</code>。现在Reverse Geocoding也能够通过这个类实现了，之前的<code>MKReverseGeocoder</code>类在iOS5里已经变成Depreciated了。获取地址使用了<code>CLGeocoder</code>类中的<code>– geocodeAddressString:completionHandler:</code>的方法。这个方法接受一个地址字符串和一个处理Block，用来在找到结果的时候对结果进行处理。简单起见，上面的实现里直接取了获得的所有可能位置里的第一个结果。在实际的实现中应该将所有可能的结果都展示给用户，让用户决定选择正确的位置。</p>

<p>iOS 5的<code>MapKit</code>和<code>CoreLocation</code>框架都有比较大的变化，所以有可能的话可以了解一下API变化是非常有好处的——因为API变得越来越好用了。</p>

<p>（全文完）</p>
]]></content>
  </entry>
  
</feed>
