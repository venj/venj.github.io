<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Uinavigationcontroller | Cocoa学习]]></title>
  <link href="http://cocoa.venj.me/blog/categories/uinavigationcontroller/atom.xml" rel="self"/>
  <link href="http://cocoa.venj.me/"/>
  <updated>2015-11-10T14:26:31+08:00</updated>
  <id>http://cocoa.venj.me/</id>
  <author>
    <name><![CDATA[venj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UINavigationController和View Controller-based状态栏风格]]></title>
    <link href="http://cocoa.venj.me/blog/view-controller-based-status-bar-style-and-uinavigationcontroller/"/>
    <updated>2014-07-24T10:30:22+08:00</updated>
    <id>http://cocoa.venj.me/blog/view-controller-based-status-bar-style-and-uinavigationcontroller</id>
    <content type="html"><![CDATA[<p>从iOS 7开始， <code>UIViewController</code>有了一个新的方法：<code>- preferredStatusBarStyle</code>，可以让用户指定状态栏风格。但问题是这个方法只有在<code>ViewController</code>不包含在<code>UINavigationController</code>中时才起作用。大部分情况下，<code>ViewController</code>不会单独使用，一般都会嵌套在<code>UINavigationController</code>中的。因为不知道这一点，所以在很长一段时间内，我都很困惑，明明我已经在我的<code>ViewController</code>里写了<code>- preferredStatusBarStyle</code>, 却一点都不起作用。</p>

<p>知道了原因，接下来就简单了。我们可以写一个<code>UINavigationController</code>的扩展，覆盖其默认实现，返回最上面的<code>ViewController</code>的<code>preferredStatusBarStyle</code>。</p>

<p>代码如下：</p>

<!-- more -->


<pre><code class="objc">//UINavigationController+StatusBar.h
#import &lt;UIKit/UIKit.h&gt;

@interface UINavigationController (StatusBar)
- (UIStatusBarStyle)preferredStatusBarStyle;
@end

//UINavigationController+StatusBar.m
#import "UINavigationController+StatusBar.h"

@implementation UINavigationController (StatusBar)
- (UIStatusBarStyle)preferredStatusBarStyle {
    return [[self topViewController] preferredStatusBarStyle];
}
@end
</code></pre>

<p>用Swift来写：</p>

<pre><code>extension UINavigationController {
    override public func preferredStatusBarStyle() -&gt; UIStatusBarStyle {
        return self.topViewController.preferredStatusBarStyle();
    }
}
</code></pre>

<p>然后，在需要使用<code>UINavigationController</code>的时候，引入<code>UINavigationController+StatusBar.h</code>头文件就可以了。如果你用Swift，增加了<code>extension</code>就完成了。</p>

<p>补充：</p>

<p>要使用View Controller Based Status Bar Style，你可能需要在项目的的Info.plist里增加一条记录：“View controller-based status bar appearance”，并将其值设置成<code>YES</code>。</p>

<p>参考来源：<a href="http://mythodeia.wordpress.com/2014/05/09/view-controller-based-status-bar-appearance/">Being Objective…</a></p>

<p>示例代码(Swift)：<a href="https://github.com/venj/Cocoa-blog-code/tree/master/NavStatusStyle">NavStatusStyle</a></p>

<p>（全文完）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[推View Controller时隐藏TabBar]]></title>
    <link href="http://cocoa.venj.me/blog/push-viewcontroller-hide-buttom-bar/"/>
    <updated>2014-01-07T10:53:17+08:00</updated>
    <id>http://cocoa.venj.me/blog/push-viewcontroller-hide-buttom-bar</id>
    <content type="html"><![CDATA[<p>设想一个场景，RootViewController是一个TabBarController，里面的子Controller是一个NavigationController。NavigationController的子ViewController在执行<code>-pushViewController:animated:</code>的时候，默认情况下，这个新的ViewController将会被UITabBar覆盖。</p>

<p>但是有时，我们希望推入这个新的ViewController的时候，TabBarController也被推走。要做到这一点其实很简单，只需要在这个新的ViewController上设置<code>hidesBottomBarWhenPushed</code>属性为<code>YES</code>。</p>

<p>示例代码如下：</p>

<!-- more -->


<pre><code class="objc">// 初始化ViewController的层级结构
UIViewController *vc1 = [[UIViewController alloc] initWithNibName:@"SomeViewControllerNibName" bundle:nil];
UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc1];
UITabBarController *tc = [[UITabBarController alloc] init];
tc.viewControllers = @[nav];

...

// 推入新的ViewController
UIViewController *vc2 = [[UIViewController alloc] initWithNibName:@"SomeOtherViewControllerNibName" bundle:nil];
vc2.hidesBottomBarWhenPushed ＝ YES; //这是关键！
[vc1.navigationController pushViewController:vc2 animated:YES];
</code></pre>

<p>就这么简单。</p>

<p>后记：好久没有写Blog了，2014年希望自己能勤快一点，多更新些。哪怕是一些很小的知识点，也尽量记录和分享出来，就当是给自己做备忘。</p>

<p>（全文完）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在iOS 4中自定义BarButtonItem]]></title>
    <link href="http://cocoa.venj.me/blog/custom-barbuttomitem-for-ios4/"/>
    <updated>2012-02-29T15:08:00+08:00</updated>
    <id>http://cocoa.venj.me/blog/custom-barbuttomitem-for-ios4</id>
    <content type="html"><![CDATA[<p>在iOS 5中已经有了自定义<code>UIBarButtonItem</code>背景的API。但是在iOS 4中，自定义BarButtonItem背景就复杂很多了。其中最典型也最容易实现的一种是方法是试用<code>UIBarButtonItem</code>的<code>-initWithCustomView:</code>方法，传递一个自定义<code>UIButton</code>对象进去。</p>

<p>在深入讨论自定义<code>UIBarButtonItem</code>，让我们来先解决自定义<code>UIButton</code>的一个问题：那就是Button的标题的长度是变化的，我们应该通过什么方法让背景图片适应标题长度的变化呢？</p>

<p>下面是解决方案：</p>

<!-- more -->


<pre><code class="objc">if ([image respondsToSelector:@selector(resizableImageWithCapInsets:)]) {
    // iOS 5中的方法。
    buttonImage = [image resizableImageWithCapInsets:UIEdgeInsetsMake(0, leftcap, 0, rightcap)];
}
else {
    // iOS 4-中的方法。该方法在iOS 5中已经标注为“Depreciated”。
    buttonImage = [image stretchableImageWithLeftCapWidth:leftcap topCapHeight:0];
}
</code></pre>

<p>这个解决方案的核心是<code>-stretchableImageWithLeftCapWidth:topCapHeight:</code>（或iOS 5中的<code>- resizableImageWithCapInsets:</code>）方法。这个方法能够根据指定的左右两侧“帽子”的尺寸（当然，上下拉伸也可以），拉伸图片的中间部分。具体效果你可以亲自试验一下。</p>

<p>好了，回到自定义<code>UIBarButtonItem</code>的问题上来。既然<code>UIButton</code>背景的问题解决之后，我们就可以创建基于<code>UIButton</code>对象的<code>UIBarButtonItem</code>了：</p>

<pre><code class="objc">// 用来被拉伸的图片
UIImage *originalImage = [UIImage imageNamed:@"backButton"];
UIImage *buttonImage;
// 拉伸图片
if ([[UIImage class] respondsToSelector:@selector(resizableImageWithCapInsets:)]) {
    buttonImage = [originalImage resizableImageWithCapInsets:UIEdgeInsetsMake(0, 13, 0, 8)];
}
else {
    buttonImage = [originalImage stretchableImageWithLeftCapWidth:13 topCapHeight:0];
}
// 创建自定义按钮
UIButton *backButton = [UIButton buttonWithType:UIButtonTypeCustom];
[backButton setBackgroundImage:buttonImage forState:UIControlStateNormal];
NSString *title = @"Back";
[backButton setTitle:title forState:UIControlStateNormal];
UIFont *font = [UIFont boldSystemFontOfSize:12];
backButton.titleLabel.font = font;
CGSize labelSize = [title sizeWithFont:font];
// 模拟系统按钮，设置文字阴影
backButton.titleLabel.shadowColor = [UIColor grayColor];
backButton.titleLabel.shadowOffset = CGSizeMake(0.0, -1.0);
// 设置按钮的Frame，宽度为文字的宽度加上拉伸图宽度的和
backButton.frame = CGRectMake(0, 0, labelSize.width + buttonImage.size.width, buttonImage.size.height);
// 设置按钮的target和action
[backButton addTarget:self action:@selector(back) 
     forControlEvents:UIControlEventTouchUpInside];
//创建UIBarButtonItem
self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] 
                                         initWithCustomView:backButton];
</code></pre>

<p>这就是实现自定义<code>UIBarButtonItem</code>对象的核心了。我写了一个<code>UIBarButtonItem</code>的subclass，有点粗糙，但是能够实现上述的所有功能，并且能够响应设备方向的变化对按钮的宽度作出调整。用法很简单：</p>

<pre><code class="objc">VCTranslucentBarButtonItem *item = [[VCTranslucentBarButtonItem alloc] initWithType:VCTranslucentBarButtonItemTypeBackward title:@"Test Button" target:self action:@selector(buttonClicked)];
self.navigationItem.leftBarButtonItem = item;
</code></pre>

<p>完整的源码我就不在本文中贴出来了，反正已经推送到github上了。效果如下图所示：</p>

<p><img class="center" src="/images/posts/barbuttonportrait.png"></p>

<p><img class="center" src="/images/posts/barbuttonlandscape.png"></p>

<p>上图中显示的是<code>DetailViewController</code>的自定义后退按钮，注意颜色上和<code>MasterViewController</code>中按钮的区别。因为用的按钮素材的问题，效果图未能完整复制系统的按钮样式，不过这已经足够说明问题了。实战中，你可以让设计师做更好，更美观的按钮。</p>

<p>有兴趣的可以把<a href="https://github.com/venj/Cocoa-blog-code/tree/master/Custom%20NavBar">github</a>上的源码拉下来看看。本文和前一篇文章的源码在同一个项目中。</p>

<p>注：本文所有的代码都用了ARC，以后的文章中将不再特别说明。如果你看到本博客的示例代码没有<code>release</code>，那么基本上都是用了ARC。</p>

<p>(全文完)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义UINavigationBar的背景]]></title>
    <link href="http://cocoa.venj.me/blog/custom-navbar-background/"/>
    <updated>2012-01-11T15:20:00+08:00</updated>
    <id>http://cocoa.venj.me/blog/custom-navbar-background</id>
    <content type="html"><![CDATA[<p>为了让我们的应用程序更加美观，我们往往希望对iPhone自带的控件进行一点自定义。比如，本文即将要讲述的，给<code>UINavigationBar</code>加一个背景。</p>

<p>最简单的一个自定义方法就是修改一下背景色。方法非常简单，那就是使用它的<code>tintColor</code>属性：</p>

<!-- more -->


<pre><code class="objc">self.navigationController.navigationBar.tintColor = [UIColor redColor];
</code></pre>

<p>这样就轻松地为<code>UINavigationBar</code>加上了红色的背景色&ndash;当然你可以使用任何颜色。下面是模拟器中的测试效果：</p>

<p><img class="center" src="/images/posts/custom-navbar-bg-color.png"></p>

<p>另外，就是为<code>UINavigationBar</code>加背景图片。这个稍稍复杂一些&ndash;特别是对于iOS 5之前的iOS来说。先说说简单的，iOS 5已经为<code>UINavigationBar</code>增加了一个新的方法<code>-setBackgroundImage:forBarMetrics:</code>，专门用于设置<code>UINavigationBar</code>的背景图片。</p>

<p><strong>Updated</strong></p>

<p>删除了在iOS4下有问题的方法。</p>

<p><strong>Update</strong></p>

<p>适用于iOS 4的方法是在<code>AppDelegate.m</code>中创建一个<code>UINavigationBar</code>的Catagory，覆盖<code>-drawRect:</code>方法，如下：</p>

<pre><code class="objc">@implementation UINavigationBar (CustomImage)
- (void)drawRect:(CGRect)rect {
    UIImage *img = [UIImage imageNamed:@"navbar"];
    [img drawInRect:rect];
}
@end

...

//在后面加入判断是否支持iOS 5的代码，来提供对iOS 5的支持：

if ([bar respondsToSelector:@selector(setBackgroundImage:forBarMetrics:)]) {
    [bar setBackgroundImage:bg forBarMetrics:UIBarMetricsDefault];
}
</code></pre>

<p>这种方法将应用到程序中所有的<code>UINavigationBar</code>实例。但是通常来说，是不推荐覆盖系统自带的类中的方法的，所以我并不推荐使用这种方法。</p>

<p><a href="http://idevrecipes.com/2011/01/12/how-do-iphone-apps-instagramreederdailybooth-implement-custom-navigationbar-with-variable-width-back-buttons/">这里</a>介绍了更好的方法。</p>

<p>(全文完)</p>
]]></content>
  </entry>
  
</feed>
