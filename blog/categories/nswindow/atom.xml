<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: NSWindow | Cocoa学习]]></title>
  <link href="http://venj.github.io/blog/categories/nswindow/atom.xml" rel="self"/>
  <link href="http://venj.github.io/"/>
  <updated>2013-12-27T14:24:35+08:00</updated>
  <id>http://venj.github.io/</id>
  <author>
    <name><![CDATA[venj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CodeBox风格的窗口打开动画]]></title>
    <link href="http://venj.github.io/blog/code-box-like-window-open-animation/"/>
    <updated>2013-06-03T16:51:00+08:00</updated>
    <id>http://venj.github.io/blog/code-box-like-window-open-animation</id>
    <content type="html"><![CDATA[<p>一直觉得<a href="http://www.shpakovski.com/codebox/">CodeBox</a>的窗口呈现动画很帅气－－就是窗口Bounce了一下的那个效果。对了，就是<code>NSAlert</code>在OSX Lion下的显示的时候那个动画。我一直试图复刻那个动画，但是每次都灰头土脸的结束各种尝试。</p>

<p>今天搜索网络，在StackOverflow上找到了<a href="http://stackoverflow.com/questions/14591785/how-to-open-a-nswindow-with-a-popup-animation">答案</a>－－事实上，我曾经多次无限接近正确答案，但最终还是没有成功。</p>

<!-- more -->


<p>答案实际上很简单：设置<code>NSWindow</code>对象的<code>animationBehavior:</code>为<code>NSWindowAnimationBehaviorAlertPanel</code>。</p>

<p>但是为啥我曾经这么设置，却一直没有成功呢？因为我一直用的非Document Based Application模版做的测试！</p>

<p>在Document Based Application模版下，直接在Interface Builder里，设置窗口的Animation为Alert Style，就直接达成了CodeBox的窗口呈现动画了，一行代码都不用写。但是对于非Document Based Application，你需要做一点点工作才行。</p>

<p>首先，在Interface Builder里设置Animation为Alert Style，然后，取消Visible At Launch前面的选择。如下图：</p>

<p><img class="center" src="/images/posts/codebox_animation.png"></p>

<p>然后，在<code>-applicationDidFinishLaunching:</code>方法中，加入如下代码：</p>

<p>```objc
dispatch_async(dispatch_get_main_queue(), ^{</p>

<pre><code>[self.window makeKeyAndOrderFront:nil];
</code></pre>

<p>});
```</p>

<p>编译，执行。Boom！窗口动画就出来了！注意了，这个动画只有OS X Lion及更新版本上可以使用。虽然我走了很多弯路，但是最终还是成功找到解决方法，一方面，显示了自己有多么无知，但是最终解决问题，也总算有一丝安慰。</p>

<p>(全文完)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在NSWindow窗口标题栏上绘制辅助视图]]></title>
    <link href="http://venj.github.io/blog/draw-accessory-view-on-window-title-bar/"/>
    <updated>2011-08-27T01:25:00+08:00</updated>
    <id>http://venj.github.io/blog/draw-accessory-view-on-window-title-bar</id>
    <content type="html"><![CDATA[<p>如果你用过<a href="http://flyingmeat.com/acorn/">Acorn</a>的试用版，你一定知道Acorn的试用版的文档窗口的标题栏上有一个提示过期的按钮。虽然标题栏不能被滥用来绘制控件，但是有时候，恰到好处的使用会改善用户体验。比如说，Lion的全屏按钮就是放在标题栏上的；<a href="http://chocolatapp.com/">Chocolat</a>文本编辑器也放了一个新建标签的按钮在标题栏上，Lion全屏按钮的旁边。</p>

<!-- more -->


<p>
<img class="center" src="/images/posts/window-titlebar-1.png" title="Acorn的试用提示" ></p>

<p><img class="center" src="/images/posts/window-titlebar-2.png" title="Lion窗口的全屏按钮" ></p>

<p><img class="center" src="/images/posts/window-titlebar-3.png" title="Chocolat的新建标签按钮" ></p>

<p>初看起来，在标题栏上加一个辅助视图似乎很有难度；不过事实上，早就已经有人<a href="http://iloveco.de/adding-a-titlebar-accessory-view-to-a-window/">把方法贴在Blog里</a>了（注意，原文里的<code>UIController</code>不是<code>UIKit</code>的类，该文发布的时候<code>UIKit</code>和iPhone还没有发布呢，因此这算是个NameSpace冲突吧，其实文中的<code>UIController</code>就是个普通的Cocoa Controller类而已）。本文算是半转载地复制代码过来，供大家参考：</p>

<p>``` objc
&ndash; (void)awakeFromNib {</p>

<pre><code>[self composeInterface];
</code></pre>

<p>}</p>

<ul>
<li><p>(void)composeInterface {
  NSView *themeFrame = [[self.window contentView] superview];</p>

<p>  NSRect themeFrameRect = [themeFrame frame];
  NSRect accessoryViewFrame = [self.accessoryView frame];
  NSRect newFrame = NSMakeRect(themeFrameRect.size.width &ndash; accessoryViewFrame.size.width,
                               themeFrameRect.size.height &ndash; accessoryViewFrame.size.height,
                               accessoryViewFrame.size.width,
                               accessoryViewFrame.size.height);
  [self.accessoryView setFrame:newFrame];</p>

<p>  [themeFrame addSubview:self.accessoryView];
}
```</p></li>
</ul>


<p>我做了一个示例项目，放到了本blog的<a href="https://github.com/venj/Cocoa-blog-code/tree/master/TitleBar%20Addons">github</a>里。下面简述一下过程：在<code>WindowController</code>（为了示例的简便起见，我直接放在<code>AppDelegate</code>里了）里新建上述<code>-composeInterface:</code>方法，然后在<code>-awakeFromNib:</code>里调用这个方法。这个方法的原理非常简单，就是获取<code>window</code>的<code>contentView</code>的上一级View，然后把<code>accessoryView</code>定位到该View的右上角。这样我们就能够在<code>accessoryView</code>里绘制控件了。不过需要注意的是，窗口标题栏高度有限，因此<code>accessoryView</code>的高度不能超过22pt，并且，也不要太宽。不过放一个小按钮还是绰绰有余了。另外，如果有Lion的全屏按钮支持的话，需要在<code>accessoryView</code>的右侧留出全屏按钮的空间；或者在<code>composeInterface</code>方法中，设置<code>accessoryView</code>的<code>Frame</code>的时候，留出全屏按钮的空间。下面就是这个我做的示例项目的运行效果：</p>

<p><img class="center" src="/images/posts/window-titlebar-4.png"></p>

<p>看着是不是还是挺有范儿的？ :D 如果你有什么不清楚的地方，可以看一下示例程序的源码，对于新建项目，添加控件，设置视图等这些常规的操作我就不赘述了。</p>

<p>（全文完）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记忆窗口位置]]></title>
    <link href="http://venj.github.io/blog/remember-window-position/"/>
    <updated>2011-06-12T12:26:00+08:00</updated>
    <id>http://venj.github.io/blog/remember-window-position</id>
    <content type="html"><![CDATA[<p>在程序中记忆窗口的位置，以便在下次打开的时候恢复记忆的位置。这对很多程序来说还是比较有必要的。方法很简单：</p>

<p>``` objc
&ndash; (void)windowDidMove:(NSNotification *)notification {</p>

<pre><code>// 自动记忆和恢复位置
[self.window setFrameAutosaveName:@"Position"];
/* 如果是基于文档的程序
[[self.window windowController] setShouldCascadeWindows:NO];
[self.window saveFrameUsingName:[window representedFilename]];
*/
// 手动记忆位置
[self.window setFrameUsingName:@"Some name"];
</code></pre>

<p>}
```</p>

<p>// 如果是手动保存，则需要手动恢复</p>

<p>``` objc
&ndash; (void)awakeFromNib {</p>

<pre><code>[self.window setFrameAutosaveName:@"Some name"];
</code></pre>

<p>}
```</p>

<p>// 清除记忆的位置</p>

<p>``` objc
&ndash; (IBAction)clearWindowPosition:(id)sender {</p>

<pre><code>[NSWindow removeFrameUsingName:@"Some name"];
</code></pre>

<p>}
```</p>

<p>很简单吧。更多可以参考<a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/ApplicationKit/Classes/NSWindow_Class/Reference/Reference.html">NSWindows Class Reference</a>和<a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/WinPanel/WinPanel.html">Window Programming Guide</a>文档。</p>

<p>（全文完）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【更新】把程序窗口放在屏幕中央]]></title>
    <link href="http://venj.github.io/blog/move-window-to-screen-center/"/>
    <updated>2011-04-09T12:55:00+08:00</updated>
    <id>http://venj.github.io/blog/move-window-to-screen-center</id>
    <content type="html"><![CDATA[<p>在写程序的时候，我们往往需要把窗口放在屏幕中央。方法其实很简单，代码如下：</p>

<p>``` objc
&ndash; (void)awakeFromNib {</p>

<pre><code>CGRect windowRect = [self.window frame];
CGRect screenRect = [[NSScreen mainScreen] frame];
CGPoint newOrigin;
newOrigin.x = (screenRect.size.width / 2) - (windowRect.size.width / 2);
newOrigin.y = (screenRect.size.height / 2) + (windowRect.size.height / 2);
[self.window setFrameOrigin:newOrigin];
</code></pre>

<p>}
<code>``
如果程序只有一个窗口，那么这段代码也可以放在</code>AppDelegate<code>的</code>-applicationDidFinishLaunching:<code>方法里。如果放在</code>-applicationDidFinishLaunching:<code>里，很可能会引起窗口“闪”到屏幕中央（除非程序特别小，小到几乎无需初始化），因此，放在</code>-awakeFromNib`里才是正确的做法。</p>

<p><strong>2011-08-15更新：</strong></p>

<p>事实上<code>NSWindow</code>已经有了一个专门的方法来处理窗口居中的：<code>- (void)center</code>。<br/>
``` objc
&ndash; (void)awakeFromNib {</p>

<pre><code>[self.window center];
</code></pre>

<p>}
```
<strong>不仔细看文档害死人啊！</strong></p>

<p>（全文完）</p>
]]></content>
  </entry>
  
</feed>
