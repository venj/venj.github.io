<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | Cocoa学习]]></title>
  <link href="http://cocoa.venj.me/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://cocoa.venj.me/"/>
  <updated>2015-11-11T10:35:36+08:00</updated>
  <id>http://cocoa.venj.me/</id>
  <author>
    <name><![CDATA[venj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[让Alamofire使用自签名证书]]></title>
    <link href="http://cocoa.venj.me/blog/alamofire-ssl/"/>
    <updated>2015-11-09T15:35:05+08:00</updated>
    <id>http://cocoa.venj.me/blog/alamofire-ssl</id>
    <content type="html"><![CDATA[<p>Alamofire每次大版本号更新，都会引入大量API更新。3.x版更新用Swift 2.0的新特征更新了很多接口。网上很多关于Alamofire如何使用自定义SSL证书的文章都已经过时。经过一番搜索，最后找到了一个靠谱的解决方案。</p>

<!-- more -->


<pre><code class="swift">// AppDelegate.swift
func configureAlamofireManager() {
    let manager = Manager.sharedInstance
    manager.delegate.sessionDidReceiveChallenge = { session, challenge in
        var disposition: NSURLSessionAuthChallengeDisposition = .PerformDefaultHandling
        var credential: NSURLCredential?

        if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodServerTrust {
            disposition = NSURLSessionAuthChallengeDisposition.UseCredential
            credential = NSURLCredential(forTrust: challenge.protectionSpace.serverTrust!)
        } else {
            if challenge.previousFailureCount &gt; 0 {
                disposition = .CancelAuthenticationChallenge
            } else {
                credential = manager.session.configuration.URLCredentialStorage?.defaultCredentialForProtectionSpace(challenge.protectionSpace)

                if credential != nil {
                    disposition = .UseCredential
                }
            }
        }
        return (disposition, credential)
    }
}
</code></pre>

<p>在AppDelegate.swift中创建上面这个方法，在<code>application(_:, didFinishLaunchingWithOptions:) -&gt; Bool</code>方法中调用一次这个方法，这样，后续的使用Alamofire默认的<code>request</code>方法发起的请求就可以使用自定义SSL证书了。</p>

<p>如果不要全局跳过自定义SSL证书检查，你可以在需要跳过自定义SSL请求的时候，单独创建一个<code>Alamofire.Manager</code>对象，然后再调用上述方法中的<code>delegate.sessionDidReceiveChallenge</code>，然后用<code>manager.request</code>创建<code>request</code>进行Web请求。</p>

<p>参考：<a href="http://stackoverflow.com/questions/30671029/alamofire-ssl-failure">StackOverflow</a></p>

<p>（全文完）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[［更新］把Swift用作脚本语言]]></title>
    <link href="http://cocoa.venj.me/blog/scripty-swift/"/>
    <updated>2014-08-01T15:23:18+08:00</updated>
    <id>http://cocoa.venj.me/blog/scripty-swift</id>
    <content type="html"><![CDATA[<p>Swift是Apple开发的很酷的新语言。在看WWDC介绍Swift的时候，看到它有一个REPL交互界面，我当时就在想，Swift难道能像脚本语言一样用？如果可以的话，那岂不是一门非常有潜力的脚本语言了（当然，就跨平台而言，Swift完败）？性能优异，语法现代，REPL，还有Playground，简直无敌了！所以下载完Xcode 6 beta 1，我就试了一个简单的脚本：</p>

<pre><code class="bash">#!/usr/bin/env xcrun swift
println("Hello Swift.")
</code></pre>

<p>如果装过命令行工具包，可以直接这么写：</p>

<pre><code class="bash">#!/usr/bin/env swift
println("Hello Swift.")
</code></pre>

<p>保存为任意文件名，比如：<code>hello.swift</code>。然后在命令行执行：</p>

<pre><code class="bash">chmod +x hello.swift
./hello.swift
</code></pre>

<p>执行<code>./hello.swift</code>的时候，CPU飚了一下，终端光标停顿了一下之后，打印出了<code>Hello Swift.</code>。然后我就发现和脚本的同级目录下多了一个可执行文件，名为<code>hello</code>。敢情执行这段“脚本”实际上是编译了脚本，然后再执行编译的结果啊。当时我没有深究，只想着照这样，用Swift写脚本是不行了。然后我就把这件事丢下了。</p>

<!-- more -->


<p>直到最近，我发现，原来可以给Swift加上一个参数，就可以不经过编译的步骤，直接执行“Swift脚本”。如下：</p>

<pre><code class="bash">#!/usr/bin/env xcrun swift -i
println("Hello Swift.")
</code></pre>

<p>这样，就不会经过编译的步骤，直接执行Swift了。执行<code>./hello.swift</code>的时候，也没有了编译产生的卡顿。关于“脚本”的性能我没有深究，不过无论如何，作为脚本语言来用，应该是可以胜任的。</p>

<p>这样看来，以后有些简单的实用脚本可以用Swift来写了。当然，要成为一门合格的“脚本语言”，Swift还有很长的路要走（当然，很可能Swift根本不会往那个方向去），不过即便如此，Swift的狂热粉丝们会不会慢慢地用Swift来部分替代Shell，Perl，Python，Ruby这些脚本语言写的小程序呢？拭目以待开源社区给我们带来新的惊喜。</p>

<p>补充：</p>

<p>在执行Swift“脚本”之前，你可能要把Xcode 6 beta作为首选开发工具：</p>

<pre><code class="bash">sudo xcode-select -s /Applications/Xcode6-Beta?.app
</code></pre>

<p>将上面的<code>?</code>替换为您实际在使用的beta版的版本号。Xcode 6正式发布后，直接用<code>Xcode.app</code>就可以了。</p>

<p>更新（2014-8-5）：</p>

<p>在刚刚发布的Xcode6 DP5中，把<code>xcrun swift</code>用在<code>#!</code>行里，不再需要加<code>-i</code>参数，读取命令行参数的时候，也无需使用<code>--</code>来分隔脚本和参数列表了。如下：</p>

<pre><code>#!/usr/bin/env xcrun swift
// Install Xcode6 DP5 and up to run this script.
let args = Process.arguments

for a in args {
    println("Arg: \(a)")
}
</code></pre>

<p>执行<code>./test.swift a b c d e</code>，将输出如下内容：</p>

<pre><code>Arg: ./test.swift
Arg: a
Arg: b
Arg: c
Arg: d
Arg: e
</code></pre>

<p>再次给Swift点个赞，看来Swift开发团队听到了大家想把Swift用于脚本开发的声音了。</p>

<p>（全文完）</p>
]]></content>
  </entry>
  
</feed>
