<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Take Photo | Cocoa学习]]></title>
  <link href="http://venj.github.io/blog/categories/take-photo/atom.xml" rel="self"/>
  <link href="http://venj.github.io/"/>
  <updated>2015-02-01T14:40:20+08:00</updated>
  <id>http://venj.github.io/</id>
  <author>
    <name><![CDATA[venj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Cocoa实现用Mac的摄像头拍照]]></title>
    <link href="http://venj.github.io/blog/take-photo-with-isight-camera/"/>
    <updated>2011-04-23T23:10:00+08:00</updated>
    <id>http://venj.github.io/blog/take-photo-with-isight-camera</id>
    <content type="html"><![CDATA[<p>我一直有一种错觉，似乎在Mac上通过Cocoa API，用iSight拍照会有点困难。但是我彻底错了！用Cocoa拍照非常非常简单。甚至比Cocoa Touch拍照还简单！</p>

<p>首先，我们来看看测试效果：</p>

<p><img class="center" src="/images/posts/picture-taker.png"></p>

<!-- more -->


<p>
<img class="center" src="/images/posts/picture-taker-effect.png"></p>

<p><img class="center" src="/images/posts/picture-taker-effect-2.png"></p>

<p>言归正传，我们开始开始拍照。。。。不对，是开始写拍照的代码。。。Orz</p>

<p>``` objc
&ndash; (void)applicationDidFinishLaunching:(NSNotification *)aNotification
{</p>

<pre><code>// 初始化一个pictureTaker对象
pictureTaker = [IKPictureTaker pictureTaker];
/* 下面两行代码对pictureTaker进行一些设置，比如增加拍照效果的支持，以及设置拍摄的照片的最大尺寸 */
//[pictureTaker setValue:[NSNumber numberWithBool:YES] forKey:IKPictureTakerShowEffectsKey];
//[pictureTaker setValue:[NSValue valueWithSize:NSMakeSize(800.0, 600.0)] forKey:IKPictureTakerOutputImageMaxSizeKey];
</code></pre>

<p>}
// Picture taker的回调方法。
&ndash; (void) pictureTakerDidEnd:(IKPictureTaker *)picker</p>

<pre><code>             returnCode:(NSInteger)code
            contextInfo:(void*)contextInfo
</code></pre>

<p>{</p>

<pre><code>// 获取图片，传递给Image Well。
NSImage *image = [picker outputImage];
[imageView setImage:image];
</code></pre>

<p>}
// 这里，用主窗口sheet的方式打开拍照窗口。
&ndash; (IBAction)takePicture:(id)sender {</p>

<pre><code>[pictureTaker beginPictureTakerSheetForWindow:[self window] withDelegate:self didEndSelector:@selector(pictureTakerDidEnd:returnCode:contextInfo:) contextInfo:nil];
</code></pre>

<p>}
```</p>

<p>就是这么简单！不错吧！</p>

<p>这里，我们用到了Image Kit里的方法和类，Image Kit是一个处理图像的Objective-C API，相当简单而强大。今天只是用到了其中的<code>IKPictureTaker</code>一个类，其它的类等以后需要的时候继续探索。Image Kit是Quartz框架的一个子框架，因此在编译的时候需要连接到Quartz，并且要包含<code>Quartz.h</code>这个头文件。</p>

<p>更多资料，参考苹果自家的<a href="http://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/ImageKitProgrammingGuide/">文档</a>。</p>

<p>（全文完）</p>
]]></content>
  </entry>
  
</feed>
