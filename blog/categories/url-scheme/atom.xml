<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Url Scheme | Cocoa学习]]></title>
  <link href="http://cocoa.venj.me/blog/categories/url-scheme/atom.xml" rel="self"/>
  <link href="http://cocoa.venj.me/"/>
  <updated>2015-11-11T09:29:09+08:00</updated>
  <id>http://cocoa.venj.me/</id>
  <author>
    <name><![CDATA[venj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[检测iOS的网络可用性并打开网络设置]]></title>
    <link href="http://cocoa.venj.me/blog/warn-no-network-and-show-settings/"/>
    <updated>2012-05-08T10:39:00+08:00</updated>
    <id>http://cocoa.venj.me/blog/warn-no-network-and-show-settings</id>
    <content type="html"><![CDATA[<p>今天接到个需求，要求程序能够检测网络可用性，并在没有网络可用的时候能够弹出对话框，并允许用户点击按钮打开网络设置。</p>

<p>这个问题，我首先想到的就是用一个方法检测网络可用性，然后用<code>UIApplication</code>的<code>openURL</code>方法打开某个特殊URL，就可以进入设置了。于是，我迅速地建了个测试项目，写了个简单的实现，如下：</p>

<!-- more -->


<pre><code class="objc">// 注意：这个方法仅对iOS 5.0.x有效
+ (BOOL) isNetworkAvailable { //Via Stackoverflow
    NSURL *url = [NSURL URLWithString:@"http://www.baidu.com"];
    NSURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    NSHTTPURLResponse *response = nil;
    [NSURLConnection sendSynchronousRequest:request
                          returningResponse:&amp;response error:NULL];
    return (response != nil);
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    if (![[self class] isNetworkAvailable]) {
        [[[UIAlertView alloc] initWithTitle:@"No network" message:@"No networkNetwork unavailable!!!" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:@"Settings", nil] show];
    }
}

- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex {
    if (buttonIndex != 0) {
        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"prefs:root=General&amp;path=Network"]];
    }
}
</code></pre>

<p>编译运行之后，网络不可用倒是顺利提示了，但是我很杯具的发现，点了提示框里的“Settings”按钮之后完全没有反应。于是STFW，然后悲催的发现“特殊URL”在iOS 5.1里已经失效。多方搜索基于<code>openURL</code>的方法无果。</p>

<p>正当我快放弃的时候，我发现高德地图在iOS 5.1下居然有类似的功能！（难道高德地图用了Private API，而且没有被苹果发现？我偷偷的这么想。）我对着高德地图又研究了好久，发现高德地图居然能够判断有无蜂窝网络和飞行模式！（嗯，肯定是Private API无误了！【误！】）</p>

<p>然后突然灵光一闪，是不是<code>Info.plist</code>在作祟呢？因为<code>Info.plist</code>可以检测有无摄像头啥的，检测网络应该也没问题吧。于是，我解包了高德地图，打开<code>Info.plist</code>一看，果然有一条名为<code>SBUsesNetwork</code>的<code>Boolean</code>类型的记录。</p>

<p>然后我就注释了自己的代码，在<code>Info.plist</code>里增加了一条：</p>

<pre><code class="xml">&lt;key&gt;SBUsesNetwork&lt;/key&gt;
&lt;true/&gt;
</code></pre>

<p>编译运行，终于出现了高德地图一样的提示对话框。按下“设置”按钮，顺利转跳到了“设置”程序里，问题解决。</p>

<p>经过这次乌龙，我只有再次感叹，Cocoa (Touch)深似海，而我的脚才刚踩上沙滩。</p>

<p>顺道：我真的用软件检测了高德地图是否用了Private API。答案当然是否定的。【我这个白痴】</p>

<p>(全文完)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Mac和iOS中注册自定义的URL Scheme]]></title>
    <link href="http://cocoa.venj.me/blog/custom-url-scheme-on-mac-and-ios/"/>
    <updated>2012-01-10T15:44:00+08:00</updated>
    <id>http://cocoa.venj.me/blog/custom-url-scheme-on-mac-and-ios</id>
    <content type="html"><![CDATA[<p>URL Scheme是类似<code>http://</code>，<code>ftp://</code>，<code>afp://</code>这样的东西，通常是用传输协议作为URL Scheme。不过事实上，你可以在iOS和Mac中注册任何类型的URL Scheme。当用户在浏览器中访问你的自定义URL Scheme的链接的时候，操作系统就会打开你的程序，响应这个请求。</p>

<p>要在程序中注册自定义URL Scheme非常简单。主要分为两个步骤：在程序的Info.plist中加入你需要注册的URL Scheme，然后在你的应用程序中加入处理这类请求的代码。</p>

<p>其中，第一个步骤对于iOS和Mac应用程序来说是完全相同的。方法如下：</p>

<!-- more -->


<p>在<code>Info.plist</code>中，增加一个字段，名称为<code>CFBundleURLTypes</code>（URL Types）。Xcode会自动为你创建一个必须的键：<code>URL Identifier</code>(CFBundleURLName)，这个键的值可以赋值为一个唯一的字符串。通常是逆向的域名结构，如：<code>me.venj.myapp</code>。然后在URL Types这个键下增加一个子项：<code>CFBundleURLSchemes</code>(URL Schemes)，这里填入你想注册的URL Scheme的名称，如：<code>cloud</code>。你可以增加多个URL Scheme。</p>

<p>下面是一个示例的XML结构：</p>

<pre><code class="xml">&lt;key&gt;CFBundleURLTypes&lt;/key&gt;
&lt;array&gt;
    &lt;dict&gt;
        &lt;key&gt;CFBundleURLName&lt;/key&gt;
        &lt;string&gt;me.venj.myapp&lt;/string&gt;
        &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;
        &lt;array&gt;
            &lt;string&gt;cloud&lt;/string&gt;
        &lt;/array&gt;
    &lt;/dict&gt;
&lt;/array&gt;
</code></pre>

<p>这样，我们就可以在程序中处理请求了。下面我们来分别看一下iOS和Mac下的处理方法：</p>

<p><strong>iOS：</strong></p>

<p>在iOS中，我们可以在AppDelegate中加入一个方法，来处理这个请求。对于iOS 4.1或更早的系统，使用<code>-application:handleOpenURL:</code>方法，对于iOS 4.2以后的系统使用：<code>-application:openURL:sourceApplication:annotation:</code>方法。</p>

<p>下面是示例代码：</p>

<pre><code class="objc">/* For iOS 4.1 and earlier */
- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url {
    // Handle url request.
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"URL Request" message:[url absoluteString] delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
    [alert show];

    return YES;
}

/* For iOS 4.2 and later */
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {
    // Handle url request.
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"URL Request" message:[url absoluteString] delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
    [alert show];

    return YES;
}
</code></pre>

<p>我们的演示程序只是简单的显示了一个<code>UIAlertView</code>来响应请求。实际应该如何处理那就看需要了。</p>

<p>效果如下：</p>

<p><img class="center" src="/images/posts/custom-url-scheme-ios.png"></p>

<p><strong>Mac：</strong></p>

<p>Mac下处理自定义URL Scheme的请求稍有不同。我们首先要在<code>-applicationDidFinishLaunching:</code>方法中注册一下，并指定处理URL请求的方法。如下：</p>

<pre><code class="objc">- (void)applicationDidFinishLaunching:(NSNotification *)aNotification
{
    // Insert code here to initialize your application
    [[NSAppleEventManager sharedAppleEventManager] setEventHandler:self andSelector:@selector(handleURLEvent:withReplyEvent:) forEventClass:kInternetEventClass andEventID:kAEGetURL];
}

- (void)handleURLEvent:(NSAppleEventDescriptor*)theEvent withReplyEvent:(NSAppleEventDescriptor*)replyEvent {
    // Process URL Request
    NSString* path = [[theEvent paramDescriptorForKeyword:keyDirectObject] stringValue];

    [[NSAlert alertWithMessageText:@"URL Request" defaultButton:@"OK" alternateButton:nil otherButton:nil informativeTextWithFormat:@"%@", path] runModal];
}
</code></pre>

<p>类似的，我们在示例程序中还是简单的用了一个<code>NSAlert</code>来展示我们成功捕获到了这个URL Scheme的请求。</p>

<p>效果如下：</p>

<p><img class="center" src="/images/posts/custom-url-scheme.png"></p>

<p>好了，关于自定义URL Scheme就讲这么多，用起来很简单吧。</p>

<p>说明：
- 本文的示例代码已经推送到了<a href="https://github.com/venj/Cocoa-blog-code">Github</a>，你可以下载编译之后退出程序。然后打开Safari，在地址栏中输入： <code>cloud://test.com</code>，看看是不是自动转跳到示例程序，并看到了对话框。
- 本文参考了<a href="http://stackoverflow.com/questions/1991072/how-to-handle-with-a-default-url-scheme">这里</a>和<a href="http://developer.apple.com/library/ios/#documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/AdvancedAppTricks/AdvancedAppTricks.html#//apple_ref/doc/uid/TP40007072-CH7-SW20">Apple的文档</a></p>

<p>(全文完)</p>
]]></content>
  </entry>
  
</feed>
