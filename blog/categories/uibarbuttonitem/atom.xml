<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: UIBarButtonItem | Cocoa学习]]></title>
  <link href="http://venj.github.io/blog/categories/uibarbuttonitem/atom.xml" rel="self"/>
  <link href="http://venj.github.io/"/>
  <updated>2014-01-16T11:39:35+08:00</updated>
  <id>http://venj.github.io/</id>
  <author>
    <name><![CDATA[venj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在iOS 4中自定义BarButtonItem]]></title>
    <link href="http://venj.github.io/blog/custom-barbuttomitem-for-ios4/"/>
    <updated>2012-02-29T15:08:00+08:00</updated>
    <id>http://venj.github.io/blog/custom-barbuttomitem-for-ios4</id>
    <content type="html"><![CDATA[<p>在iOS 5中已经有了自定义<code>UIBarButtonItem</code>背景的API。但是在iOS 4中，自定义BarButtonItem背景就复杂很多了。其中最典型也最容易实现的一种是方法是试用<code>UIBarButtonItem</code>的<code>-initWithCustomView:</code>方法，传递一个自定义<code>UIButton</code>对象进去。</p>

<p>在深入讨论自定义<code>UIBarButtonItem</code>，让我们来先解决自定义<code>UIButton</code>的一个问题：那就是Button的标题的长度是变化的，我们应该通过什么方法让背景图片适应标题长度的变化呢？</p>

<p>下面是解决方案：</p>

<!-- more -->


<p>``` objc
if ([image respondsToSelector:@selector(resizableImageWithCapInsets:)]) {</p>

<pre><code>// iOS 5中的方法。
buttonImage = [image resizableImageWithCapInsets:UIEdgeInsetsMake(0, leftcap, 0, rightcap)];
</code></pre>

<p>}
else {</p>

<pre><code>// iOS 4-中的方法。该方法在iOS 5中已经标注为“Depreciated”。
buttonImage = [image stretchableImageWithLeftCapWidth:leftcap topCapHeight:0];
</code></pre>

<p>}
```</p>

<p>这个解决方案的核心是<code>-stretchableImageWithLeftCapWidth:topCapHeight:</code>（或iOS 5中的<code>- resizableImageWithCapInsets:</code>）方法。这个方法能够根据指定的左右两侧“帽子”的尺寸（当然，上下拉伸也可以），拉伸图片的中间部分。具体效果你可以亲自试验一下。</p>

<p>好了，回到自定义<code>UIBarButtonItem</code>的问题上来。既然<code>UIButton</code>背景的问题解决之后，我们就可以创建基于<code>UIButton</code>对象的<code>UIBarButtonItem</code>了：</p>

<p>``` objc
// 用来被拉伸的图片
UIImage <em>originalImage = [UIImage imageNamed:@&ldquo;backButton&rdquo;];
UIImage </em>buttonImage;
// 拉伸图片
if ([[UIImage class] respondsToSelector:@selector(resizableImageWithCapInsets:)]) {</p>

<pre><code>buttonImage = [originalImage resizableImageWithCapInsets:UIEdgeInsetsMake(0, 13, 0, 8)];
</code></pre>

<p>}
else {</p>

<pre><code>buttonImage = [originalImage stretchableImageWithLeftCapWidth:13 topCapHeight:0];
</code></pre>

<p>}
// 创建自定义按钮
UIButton <em>backButton = [UIButton buttonWithType:UIButtonTypeCustom];
[backButton setBackgroundImage:buttonImage forState:UIControlStateNormal];
NSString </em>title = @&ldquo;Back&rdquo;;
[backButton setTitle:title forState:UIControlStateNormal];
UIFont *font = [UIFont boldSystemFontOfSize:12];
backButton.titleLabel.font = font;
CGSize labelSize = [title sizeWithFont:font];
// 模拟系统按钮，设置文字阴影
backButton.titleLabel.shadowColor = [UIColor grayColor];
backButton.titleLabel.shadowOffset = CGSizeMake(0.0, -1.0);
// 设置按钮的Frame，宽度为文字的宽度加上拉伸图宽度的和
backButton.frame = CGRectMake(0, 0, labelSize.width + buttonImage.size.width, buttonImage.size.height);
// 设置按钮的target和action
[backButton addTarget:self action:@selector(back)</p>

<pre><code> forControlEvents:UIControlEventTouchUpInside];
</code></pre>

<p>//创建UIBarButtonItem
self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]</p>

<pre><code>                                     initWithCustomView:backButton];
</code></pre>

<p>```</p>

<p>这就是实现自定义<code>UIBarButtonItem</code>对象的核心了。我写了一个<code>UIBarButtonItem</code>的subclass，有点粗糙，但是能够实现上述的所有功能，并且能够响应设备方向的变化对按钮的宽度作出调整。用法很简单：</p>

<p><code>objc
VCTranslucentBarButtonItem *item = [[VCTranslucentBarButtonItem alloc] initWithType:VCTranslucentBarButtonItemTypeBackward title:@"Test Button" target:self action:@selector(buttonClicked)];
self.navigationItem.leftBarButtonItem = item;
</code></p>

<p>完整的源码我就不在本文中贴出来了，反正已经推送到github上了。效果如下图所示：</p>

<p><img class="center" src="/images/posts/barbuttonportrait.png"></p>

<p><img class="center" src="/images/posts/barbuttonlandscape.png"></p>

<p>上图中显示的是<code>DetailViewController</code>的自定义后退按钮，注意颜色上和<code>MasterViewController</code>中按钮的区别。因为用的按钮素材的问题，效果图未能完整复制系统的按钮样式，不过这已经足够说明问题了。实战中，你可以让设计师做更好，更美观的按钮。</p>

<p>有兴趣的可以把<a href="https://github.com/venj/Cocoa-blog-code/tree/master/Custom%20NavBar">github</a>上的源码拉下来看看。本文和前一篇文章的源码在同一个项目中。</p>

<p>注：本文所有的代码都用了ARC，以后的文章中将不再特别说明。如果你看到本博客的示例代码没有<code>release</code>，那么基本上都是用了ARC。</p>

<p>(全文完)</p>
]]></content>
  </entry>
  
</feed>
